2018-09-14: Remove field `sample_counter` from `Voice` struct.
The documentation of the field says it is updated every sample, but it is only updated for
every buffer. Because we leave it up to the plugin to decide in which way to iterate over
the generated samples (e.g. first iterate over the outputs and for each output, iterate over
the samples), it is hard to ensure that the field `sample_counter` will contain the correct
data at any time, so we simply remove it, leaving it up to the plugin to keep track of the number
of samples played.

2018-09-14: Rename `Voice.sound` to `Voice.renderable`. 
This is more consistent with the name of the data-type, so hopefully more easy to remember.

2018-09-14: Remove field `amplitude_modifier`.
Same as `sample_counter`: it's hard to ensure that this is indeed updated every sample.

2018-09-14: No longer put `sample_rate` inside a `Cell`
No internal mutability is needed here, as far as I can tell.

2018-09 to 2018-10: Add optional dependency on jack crate.
The idea is that we're putting vst's API and the jack API behind a common interface.
Client code then only needs to know about that common trait to support both.
The `Renderable` trait is renamed to `Plugin` and gets a lot more functions.
It is now the trait that a plugin needs to implement in order to support both Jack and Vst.
The `render_next` method is renamed to `render_buffer`.

2018-10-14: In the test_synth: no longer put `position` inside a `Cell`.

2018-10-14: Add an extra parameter `SynthData` to the `render_next` method in the `Renderable` trait.
The idea is that this can be used for synth-wide data that does not need to be duplicated
per voice, e.g. the samplerate.

2018-10-31: `Synth` is renamed to `Polyphonic` and the code that is not related to polyphony is split off.

2018-10-31: Change the `render_next` method so that the inputs and the outputs are now just
slices of slices instead of generic types that implement a complicated trait.
This significantly simplifies the borrow-checker issues I was having.

2018-11-**: Split the example into two: one for working with a VST back-end and one for working
with a JACK back-end.

2018-12-07: Create a macro `vst_init!` in the vst back-end that removes the need for implementing
`Default` everywhere. 
Now that `Default` does not need to be implemented anymore, we can give `Polyphonic` a "normal"
constructor that takes a vector of voices.
