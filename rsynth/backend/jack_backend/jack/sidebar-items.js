initSidebarItems({"enum":[["Control","Specify an option, either to continue processing, or to stop."],["Error","An error that can occur in JACK."],["LatencyType","Used by `NotificationHandler::latency()`."]],"fn":[["error_callback","Get the error callback that was set using `set_error_callback`. This corresponds to the one set using rust-jack, not JACK itself. `None` is returned if rust-jack hasn't set a callback or has reset it to use stderr."],["get_time","Return JACK's current system time in microseconds, using the JACK clock source."],["info_callback","Resets the JACK info callback to use stdio. Get the info callback that was set using `set_info_callback`. This corresponds to the one set using rust-jack, not JACK itself. `None` is returned if rust-jack hasn't set a callback or has reset it to use stdout."],["reset_error_callback","Restores the JACK info callback to the JACK default, which is to write to stderr."],["reset_info_callback","Restores the JACK info callback to the JACK default, which is to write to stdout."],["set_error_callback","Set the global JACK info callback. It is recommended to specify a callback that uses the log crate."],["set_info_callback","Set the global JACK info callback. It is recommended to specify a callback that uses the log crate."]],"struct":[["AsyncClient","A JACK client that is processing data asynchronously, in real-time."],["AudioIn","`AudioIn` implements the `PortSpec` trait which, defines an endpoint for JACK. In this case, it is a readable 32 bit floating point buffer for audio."],["AudioOut","`AudioOut` implements the `PortSpec` trait, which defines an endpoint for JACK. In this case, it is a mutable 32 bit floating point buffer for audio."],["CLIENT_NAME_SIZE","The maximum string length for port names."],["Client","A client to interact with a JACK server."],["ClientOptions","Option flags for opening a JACK client."],["ClientStatus","Status flags for JACK clients."],["ClosureProcessHandler","Wrap a closure that can handle the `process` callback. This is called every time data from ports is available from JACK."],["CycleTimes","Internal cycle timing information."],["MidiIn","`MidiIn` implements the `PortSpec` trait, which defines an endpoint for JACK. In this case, it defines midi input."],["MidiIter","Iterate through Midi Messages within a `Port<MidiIn>`."],["MidiOut","`MidiOut` implements the `PortSpec` trait, which defines an endpoint for JACK. In this case, it defines a midi output."],["MidiWriter","Write midi events to an output midi port."],["PORT_NAME_SIZE","The maximum string length for port names."],["PORT_TYPE_SIZE","The maximum string length for jack type names."],["Port","An endpoint to interact with JACK data streams, for audio, midi, etc..."],["PortFlags","Flags for specifying port options."],["ProcessScope","`ProcessScope` provides information on the client and frame time information within a process callback."],["RawMidi","Contains 8bit raw midi information along with a timestamp relative to the process cycle."],["RingBuffer","A lock-free ringbuffer. The key attribute of a ringbuffer is that it can be safely accessed by two threads simultaneously, one reading from the buffer and the other writing to it - without using any synchronization or mutual exclusion primitives.  For this to work correctly, there can only be a single reader and a single writer thread. Their identities cannot be interchanged."],["RingBufferReader","Read end of the ring buffer. Can only be used from one thread (can be different from the write thread)."],["RingBufferWriter","Write end of the ring buffer. Can only be used from one thread (can be a different from the read thread)."],["Unowned","`PortSpec` for a port that holds has no readable or writeable data from JACK on the created client. It can be used to connect ports or to obtain metadata."]],"trait":[["NotificationHandler","Specifies callbacks for JACK."],["PortSpec","Defines the configuration for a certain port to JACK, ie 32 bit floating audio input, 8 bit raw midi output, etc..."],["ProcessHandler","Specifies real-time processing."]],"type":[["Frames","Type used to represent sample frame counts."],["PortId","Ports have unique ids. A port registration callback is the only place you ever need to know their value."],["Time","Type used to represent the value of free running monotonic clock with units of microseconds."]]});