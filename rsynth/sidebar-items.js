initSidebarItems({"macro":[["audio_chunk","Create an audio chunk."],["vst_init","A wrapper around the `plugin_main!` macro from the `vst` crate. You call this with one parameter, which is the function declaration of a function that creates your plugin. This function may also do some setup (e.g. initialize logging). The plugin is typically a custom data type and should implement the following traits:"]],"mod":[["backend","Backends."],["buffer","Audio buffers."],["envelope","This module has not been thoroughly tested, so expect some rough edges here and there."],["event","Event handling"],["meta","Mechanisms for defining the meta-data of a plugin or application."],["test_utilities","Utilities for testing."],["utilities",""],["vecstorage","Re-exports from the `vecstorage` crate."]],"trait":[["AudioHandler","Define how sample-rate changes are handled."],["AudioHandlerMeta","Define the maximum number of audio inputs and the maximum number of audio outputs."],["AudioRenderer","Defines how audio is rendered."],["CommonAudioPortMeta","Provides some meta-data of the audio-ports used by the plugin or application to the host. This trait can be more conveniently implemented by implementing the `Meta` trait."],["CommonMidiPortMeta","Provides some meta-data of the midi-ports used by the plugin or application to the host. This trait can be more conveniently implemented by implementing the `Meta` trait."],["CommonPluginMeta","Provides common meta-data of the plugin or application to the host. This trait is common for all backends that need this info. This trait can be more conveniently implemented by implementing the `Meta` trait."],["ContextualAudioRenderer","Defines how audio is rendered, similar to the `AudioRenderer` trait. The extra parameter `context` can be used by the backend to provide extra information."],["MidiHandlerMeta","Define the maximum number of midi inputs and the maximum number of midi outputs. This trait can be more conveniently implemented by implementing the `Meta` trait."]]});