initSidebarItems({"macro":[["audio_chunk",""],["vst_init","A wrapper around the `plugin_main!` macro from the `vst` crate. You call this with one parameter, which is the function declaration of a function that creates your plugin. This function may also do some setup (e.g. initialize logging)."]],"mod":[["backend","Backends."],["buffer",""],["envelope",""],["event","Event handling"],["meta","Example ------- ``` use rsynth::meta::{Meta, MetaData, InOut}; struct MyPlugin {     meta: MetaData<&'static str, &'static str, &'static str> /* ... */ }"],["middleware","Middleware like support for polyphony, ..."],["test_utilities","Utilities for testing."],["utilities",""]],"trait":[["AudioHandler","Define how sample-rate changes are handled."],["AudioHandlerMeta","Define the maximum number of audioinputs and the maximum number of audio outputs. This trait can be more conveniently implemented by implementing the [`Meta`] trait."],["AudioRenderer","Defines how audio is rendered."],["CommonAudioPortMeta","Provides some meta-data of the audio-ports used by the plugin or application to the host. This trait can be more conveniently implemented by implementing the [`Meta`] trait."],["CommonMidiPortMeta","Provides some meta-data of the midi-ports used by the plugin or application to the host. This trait can be more conveniently implemented by implementing the [`Meta`] trait."],["CommonPluginMeta","Provides common meta-data of the plugin or application to the host. This trait is common for all backends that need this info. This trait can be more conveniently implemented by implementing the [`Meta`] trait."],["ContextualAudioRenderer","Defines how audio is rendered, similar to the `AudioRenderer` trait. The extra parameter `context` can be used by the backend to provide extra information."],["MidiHandlerMeta","Define the maximum number of midi inputs and the maximum number of midi outputs. This trait can be more conveniently implemented by implementing the [`Meta`] trait."]]});