initSidebarItems({"macro":[["macro_for_application",""],["macro_for_rsynth",""],["macro_for_rsynth_feature_jack",""],["macro_for_rsynth_feature_vst",""],["macro_for_unpublished_crate",""],["vst_init","A wrapper around the `plugin_main!` macro from the `vst` crate. You call this with one parameter, which is the function declaration of a function that creates your plugin. This function may also do some setup (e.g. initialize logging)."],["wrap_context","`wrap_context!($wrapper_type, $type_name, $(,$type_param)*);` generates a type with the name `$wrapper_type` that adds an already-existing type `$type_name` to a \"child_context\"."]],"mod":[["backend","Defines the different backends."],["context","Traits and macros for working with context."],["dev_utilities","Utilities to be used when developing backends and middleware."],["envelope",""],["event","This module defines the `EventHandler` trait and some event types: `RawMidiEvent`, `SysExEvent`, ..."],["middleware","Middleware like support for polyphony, ..."],["note",""],["output_mode","Utilities to handle both polyphonic and monophonic plugins."]],"trait":[["Plugin","The trait that all plugins need to implement. The parameter `C` corresponds to the [context] of the plugin."]]});