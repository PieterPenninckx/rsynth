(function() {var implementors = {};
implementors["rsynth"] = [{"text":"impl&lt;'channels, 'samples, S&gt; RefUnwindSafe for AudioBufferIn&lt;'channels, 'samples, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'channels, 'out_samples, S&gt; RefUnwindSafe for AudioBufferOut&lt;'channels, 'out_samples, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'channels, 'samples, S&gt; RefUnwindSafe for AudioBufferOutChannelIteratorMut&lt;'channels, 'samples, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'in_channels, 'in_samples, 'out_channels, 'out_samples, S&gt; RefUnwindSafe for AudioBufferInOut&lt;'in_channels, 'in_samples, 'out_channels, 'out_samples, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for AudioChunk&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, S&gt; RefUnwindSafe for InterlacedSampleIterator&lt;'a, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;W&gt; RefUnwindSafe for MidiWriterWrapper&lt;W&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;W: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'b, S&gt; RefUnwindSafe for TestAudioReader&lt;'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'w, T, S&gt; RefUnwindSafe for TestAudioWriter&lt;'w, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestMidiReader","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for TestMidiWriter","synthetic":true,"types":[]},{"text":"impl&lt;AudioInErr, AudioOutErr&gt; RefUnwindSafe for CombinedError&lt;AudioInErr, AudioOutErr&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AudioInErr: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;AudioOutErr: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for AudioDummy&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MidiDummy","synthetic":true,"types":[]},{"text":"impl&lt;'wr, S&gt; !RefUnwindSafe for HoundAudioReader&lt;'wr, S&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'ww, S&gt; !RefUnwindSafe for HoundAudioWriter&lt;'ww, S&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HoundAudioError","synthetic":true,"types":[]},{"text":"impl&lt;S, T&gt; RefUnwindSafe for AudioChunkReader&lt;S, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'b, S&gt; RefUnwindSafe for AudioBufferWriter&lt;'b, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'v, 'a&gt; RefUnwindSafe for MidlyMidiReader&lt;'v, 'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;'c, 'mp, 'mw&gt; RefUnwindSafe for JackHost&lt;'c, 'mp, 'mw&gt;","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; RefUnwindSafe for VstPluginWrapper&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EnvelopeIteratorItem&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, T&gt; RefUnwindSafe for StairCaseEnvelopeIterator&lt;'a, T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for StairCaseEnvelope&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for SysExEvent&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMidiEvent","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Timed&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for Indexed&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;E&gt; RefUnwindSafe for DeltaEvent&lt;E&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MidlyConversionError","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for EventQueue&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlwaysInsertNewBeforeOld","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlwaysInsertNewAfterOld","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlwaysIgnoreNew","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AlwaysRemoveOld","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for EventCollisionHandling","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for AudioPort","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for MidiPort","synthetic":true,"types":[]},{"text":"impl&lt;G, AP, MP&gt; RefUnwindSafe for MetaData&lt;G, AP, MP&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;AP: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;MP: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;T&gt; RefUnwindSafe for InOut&lt;T&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;T: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for DummyEventHandler","synthetic":true,"types":[]},{"text":"impl&lt;S, E, M&gt; RefUnwindSafe for TestPlugin&lt;S, E, M&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;E: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;M: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for ToneIdentifier","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for RawMidiEventToneIdentifierDispatchClassifier","synthetic":true,"types":[]},{"text":"impl&lt;Identifier&gt; RefUnwindSafe for EventDispatchClass&lt;Identifier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Identifier: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for VoiceAssignment","synthetic":true,"types":[]},{"text":"impl&lt;Classifier, V&gt; RefUnwindSafe for SimpleEventDispatcher&lt;Classifier, V&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Classifier: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;V: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;VoiceIdentifier&gt; RefUnwindSafe for SimpleVoiceState&lt;VoiceIdentifier&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;VoiceIdentifier: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()