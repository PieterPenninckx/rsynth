var searchIndex={};
searchIndex["rsynth"] = {"doc":"Rsynth A crate for developing audio plugins and…","i":[[0,"buffer","rsynth","Audio buffers.",null,null],[3,"AudioBufferIn","rsynth::buffer","Audio input buffer",null,null],[3,"AudioBufferOut","","An audio output buffer.",null,null],[3,"AudioBufferOutChannelIteratorMut","","",null,null],[3,"AudioBufferInOut","","A buffer holding both input and output audio.",null,null],[3,"AudioChunk","","",null,null],[5,"buffers_as_slice","","",null,[[["usize"]],["vec"]]],[5,"buffers_as_mut_slice","","",null,[[["usize"]],["vec"]]],[11,"new","","Create a new audio input buffer.",0,[[["usize"]],["self"]]],[11,"number_of_channels","","Get the number of channels.",0,[[["self"]],["usize"]]],[11,"number_of_frames","","Get the number of frames.",0,[[["self"]],["usize"]]],[11,"channels","","Get the channels as slices.",0,[[["self"]]]],[11,"index_frames","","Get a sub-chunk with the given range of frames.",0,[[["self"],["vec"],["r"]],["audiobufferin"]]],[11,"get_channel","","Get the channel with the given index.",0,[[["self"],["usize"]],["option"]]],[11,"index_channel","","Get the channel with the given index.",0,[[["self"],["usize"]]]],[11,"new","","Create a new audio output buffer.",1,[[["usize"]],["self"]]],[11,"number_of_channels","","Get the number of channels.",1,[[["self"]],["usize"]]],[11,"number_of_frames","","Get the number of frames.",1,[[["self"]],["usize"]]],[11,"channels","","Get the channels as slices.",1,[[["self"]]]],[11,"split_channels_at","","Split into two `AudioBufferOut`s. The first will contain…",1,[[["self"],["usize"]]]],[11,"index_frames","","Get a sub-chunk with the given range of frames.",1,[[["vec"],["self"],["r"]],["audiobufferout"]]],[11,"get_channel","","Get the channel with the given index.",1,[[["self"],["usize"]],["option"]]],[11,"index_channel","","Get the channel with the given index.",1,[[["self"],["usize"]]]],[11,"set","","Set all samples to the given value.",1,[[["self"],["s"]]]],[11,"channel_iter_mut","","Get an iterator over the channels",1,[[["self"]],["audiobufferoutchanneliteratormut"]]],[11,"as_audio_buffer_in","","",1,[[["self"],["vec"]],["audiobufferin"]]],[11,"new","","Panics Panics if one of the following happens: * not all…",2,[[["usize"]],["self"]]],[11,"number_of_frames","","Get the number of frames.",2,[[["self"]],["usize"]]],[11,"number_of_input_channels","","Get the number of input channels.",2,[[["self"]],["usize"]]],[11,"number_of_output_channels","","Get the number of output channels.",2,[[["self"]],["usize"]]],[11,"split_output_channels_at","","Create two new `AUdioBufferInOut`s: one with all the input…",2,[[["self"],["usize"]]]],[11,"get_input_channel","","Get the channel with the given index.",2,[[["self"],["usize"]],["option"]]],[11,"index_input_channel","","Get the output channel with the given index.",2,[[["self"],["usize"]]]],[11,"get_output_channel","","Get the channel with the given index.",2,[[["self"],["usize"]],["option"]]],[11,"index_output_channel","","Get the output channel with the given index.",2,[[["self"],["usize"]]]],[11,"index_frames","","Get a sub-chunk with the given range of frames.",2,[[["vec"],["self"],["vec"],["r"]],["audiobufferinout"]]],[11,"separate","","Separate into an `AudioBufferIn` and an `AudioBufferOut`.",2,[[["self"]]]],[11,"inputs","","",2,[[["self"]],["audiobufferin"]]],[11,"outputs","","",2,[[["self"]],["audiobufferout"]]],[11,"zero","","Note: cannot be used in a real-time context…",3,[[["usize"]],["self"]]],[11,"from_channels","","",3,[[["vec",["vec"]],["vec"]],["self"]]],[11,"new","","Note: cannot be used in a real-time context…",3,[[["usize"]],["self"]]],[11,"with_capacity","","Create a new `AudioChunk` in which each channel has the…",3,[[["usize"]],["self"]]],[11,"channels","","",3,[[["self"]],["vec"]]],[11,"append_sliced_chunk","","Note about using in a real-time context…",3,[[["self"]]]],[11,"inner","","",3,[[],[["vec",["vec"]],["vec"]]]],[11,"as_slices","","Note: cannot be used in a real-time context…",3,[[["self"]],["vec"]]],[11,"as_mut_slices","","Note: cannot be used in a real-time context…",3,[[["self"]],["vec"]]],[11,"split","","Note: cannot be used in a real-time context…",3,[[["usize"]],["vec"]]],[0,"backend","rsynth","Backends.",null,null],[0,"combined","rsynth::backend","Combine different back-ends for audio input, audio output,…",null,null],[3,"MidiWriterWrapper","rsynth::backend::combined","A wrapper around a midi writer that implements…",null,null],[3,"TestAudioReader","","An audio reader, useful for testing.",null,null],[3,"TestAudioWriter","","An audio writer, useful for testing.",null,null],[3,"TestMidiReader","","A midi reader, useful for testing.",null,null],[3,"TestMidiWriter","","A midi writer, useful for testing.",null,null],[4,"CombinedError","","The error type that represents the errors you can get from…",null,null],[13,"AudioInError","","An error occurred when reading the audio.",4,null],[13,"AudioOutError","","An error occurred when writing the audio.",4,null],[5,"run","","Run an audio renderer with the given audio input, audio…",null,[[["audioin"],["usize"],["r"],["midiin"],["midiout"],["audioout"]],[["result",["combinederror"]],["combinederror"]]]],[0,"dummy","","Dummy backend that does nothing, useful for testing.",null,null],[3,"AudioDummy","rsynth::backend::combined::dummy","",null,null],[3,"MidiDummy","","",null,null],[11,"new","","",5,[[],["self"]]],[11,"new","","",6,[[],["self"]]],[0,"hound","rsynth::backend::combined","Backend for reading and writing `.wav` files, based on the…",null,null],[3,"HoundAudioReader","rsynth::backend::combined::hound","",null,null],[3,"HoundAudioWriter","","",null,null],[4,"HoundAudioError","","",null,null],[13,"UnsupportedAudioFormat","","",7,null],[11,"new","","",8,[[["wavreader"]],[["result",["houndaudioerror"]],["houndaudioerror"]]]],[11,"new","","",9,[[["wavwriter"]],[["result",["houndaudioerror"]],["houndaudioerror"]]]],[0,"memory","rsynth::backend::combined","In-memory backend, useful for testing.",null,null],[3,"AudioBufferReader","rsynth::backend::combined::memory","An [`AudioReader`] that reads from a given [`AudioChunk`].…",null,null],[3,"AudioBufferWriter","","An [`AudioWriter`] that appends to a given [`AudioChunk`].…",null,null],[11,"new","","Construct a new `AudioBufferReader` with the given…",10,[[["audiochunk"],["u64"]],["self"]]],[11,"new","","",11,[[["audiochunk"]],["self"]]],[17,"MICROSECONDS_PER_SECOND","rsynth::backend::combined","",null,null],[8,"AudioReader","","Define how audio is read.",null,null],[16,"Err","","The type of the error that occurs when reading data.",12,null],[10,"number_of_channels","","The number of audio channels that can be read.",12,[[["self"]],["usize"]]],[10,"frames_per_second","","The sampling frequency in frames per second.",12,[[["self"]],["u64"]]],[10,"fill_buffer","","Fill the buffers. Return the number of frames that have…",12,[[["self"],["audiobufferout"]],[["usize"],["result",["usize"]]]]],[8,"AudioWriter","","Define how audio is written.",null,null],[16,"Err","","The type of the error that occurs when reading data.",13,null],[10,"write_buffer","","",13,[[["self"],["audiobufferin"]],["result"]]],[8,"MidiWriter","","",null,null],[10,"write_event","","",14,[[["self"],["deltaevent",["rawmidievent"]],["rawmidievent"]]]],[11,"new","","",15,[[["w"],["f64"]],["self"]]],[11,"step_frames","","",15,[[["self"],["u64"]]]],[11,"new","","Create a new `TestAudioReader`. The newly created…",16,[[["audiobufferreader"],["usize"],["vec",["usize"]]],["self"]]],[11,"new","","Create a new `TestAudioWriter`. The newly created will…",17,[[["t"],["vec",["audiochunk"]],["audiochunk"]],["self"]]],[11,"new","","Create a new `TestMidiReader` that will return the…",18,[[["vec",["deltaevent"]],["deltaevent",["rawmidievent"]]],["self"]]],[11,"new","","Create a new `TestMidiWriter` that will panic when the…",19,[[["vec",["deltaevent"]],["deltaevent",["rawmidievent"]]],["self"]]],[11,"check_last","","",19,[[["self"]]]],[0,"jack_backend","rsynth::backend","Wrapper for the [JACK] backend. Support is only enabled if…",null,null],[3,"JackHost","rsynth::backend::jack_backend","",null,null],[5,"run","","Run the plugin until the user presses a key on the…",null,[[["p"]],[["error"],["result",["error"]]]]],[0,"vst_backend","rsynth::backend","Wrapper for the VST backend.",null,null],[3,"VstPluginWrapper","rsynth::backend::vst_backend","A struct used internally by the `vst_init` macro.…",null,null],[8,"VstPluginMeta","","A VST plugin should implement this trait in addition to…",null,null],[10,"plugin_id","","",20,[[["self"]],["i32"]]],[10,"category","","",20,[[["self"]],["category"]]],[11,"get_info","","",21,[[["self"]],["info"]]],[11,"new","","",21,[[["hostcallback"],["p"]],["self"]]],[11,"host","","",21,[[["self"]],["hostcallback"]]],[11,"process","","",21,[[["self"],["audiobuffer"]]]],[11,"process_f64","","",21,[[["audiobuffer"],["self"]]]],[11,"get_input_info","","",21,[[["self"],["i32"]],["channelinfo"]]],[11,"get_output_info","","",21,[[["self"],["i32"]],["channelinfo"]]],[11,"process_events","","",21,[[["self"],["events"]]]],[11,"set_sample_rate","","",21,[[["self"],["f64"]]]],[8,"HostInterface","rsynth::backend","Defines an interface for communicating with the host or…",null,null],[10,"output_initialized","","Return whether the output buffers are zero-initialized.…",22,[[["self"]],["bool"]]],[11,"stop","","Stop processing. For backends that do not support…",22,[[["self"]]]],[8,"Stop","","A marker trait that indicates that the backend can be…",null,null],[0,"envelope","rsynth","This module has not been thoroughly tested, so expect some…",null,null],[3,"EnvelopeIteratorItem","rsynth::envelope","",null,null],[12,"item","","",23,null],[12,"has_updated","","",23,null],[0,"staircase_envelope","","",null,null],[3,"StairCaseEnvelopeIterator","rsynth::envelope::staircase_envelope","",null,null],[3,"StairCaseEnvelope","","",null,null],[8,"Envelope","rsynth::envelope","Defines the behaviour of an envelope. An envelope allows…",null,null],[16,"Iter","","The type of the iterator.",24,null],[16,"EventType","","",24,null],[10,"iter","","Get the iterator.",24,[[["self"]]]],[10,"insert_event","","",24,[[["self"]]]],[10,"forget_past","","",24,[[["self"],["u32"]]]],[0,"event","rsynth","Event handling",null,null],[3,"SysExEvent","rsynth::event","A System Exclusive (\"SysEx\") event.",null,null],[3,"RawMidiEvent","","A raw midi event.",null,null],[3,"Timed","","`Timed<E>` adds timing to an event.",null,null],[12,"time_in_frames","","The offset (in frames) of the event relative to the start…",25,null],[12,"event","","The underlying event.",25,null],[3,"Indexed","","`Indexed<E>` adds an index to an event.",null,null],[12,"index","","The index of the event",26,null],[12,"event","","The underlying event.",26,null],[3,"DeltaEvent","","",null,null],[12,"microseconds_since_previous_event","","",27,null],[12,"event","","",27,null],[0,"event_queue","","",null,null],[3,"EventQueue","rsynth::event::event_queue","",null,null],[3,"AlwaysInsertNewBeforeOld","","",null,null],[3,"AlwaysInsertNewAfterOld","","",null,null],[3,"AlwaysIgnoreNew","","",null,null],[3,"AlwaysRemoveOld","","",null,null],[4,"EventCollisionHandling","","",null,null],[13,"InsertNewBeforeOld","","",28,null],[13,"InsertNewAfterOld","","",28,null],[13,"IgnoreNew","","",28,null],[13,"RemoveOld","","",28,null],[8,"HandleEventCollision","","",null,null],[10,"decide_on_collision","","",29,[[["t"],["self"]],["eventcollisionhandling"]]],[11,"new","","Panics Panics if `capacity == 0`.",30,[[["usize"]],["self"]]],[11,"queue_event","","Queue a new event. When the buffer is full, an element may…",30,[[["timed"],["self"],["h"]],[["option",["timed"]],["timed"]]]],[11,"forget_before","","Remove all events before, but not on, this threshold.",30,[[["self"],["u32"]]]],[11,"clear","","Remove all events from the queue.",30,[[["self"]]]],[11,"shift_time","","Shift time forward by `new_zero_time` frames.",30,[[["self"],["u32"]]]],[11,"get_last_before","","",30,[[["u32"],["self"]],[["timed"],["option",["timed"]]]]],[11,"first","","",30,[[["self"]],[["timed"],["option",["timed"]]]]],[11,"split","","",30,[[["vecstorage"],["vecstorage"],["audiobufferinout"],["r"],["self"],["c"]]]],[8,"EventHandler","rsynth::event","The trait that plugins should implement in order to handle…",null,null],[10,"handle_event","","",31,[[["self"],["e"]]]],[8,"ContextualEventHandler","","The trait that plugins should implement in order to handle…",null,null],[10,"handle_event","","",32,[[["context"],["self"],["e"]]]],[11,"new","","Create a new `SysExEvent` with the given `data`.",33,[[],["self"]]],[11,"data","","Get the data from the `SysExEvent`",33,[[["self"]]]],[11,"new","","Create a new `RawMidiEvent` with the given raw data.",34,[[],["self"]]],[11,"try_new","","Try to create a new `RawMidiEvent` with the given raw…",34,[[],["option"]]],[11,"data","","Get the raw data from a `RawMidiEvent`.",34,[[["self"]]]],[11,"new","","",25,[[["u32"],["e"]],["self"]]],[11,"new","","",26,[[["usize"],["e"]],["self"]]],[0,"meta","rsynth","Mechanisms for defining the meta-data of a plugin or…",null,null],[3,"AudioPort","rsynth::meta","A \"marker\" struct to be used as a type parameter for the…",null,null],[3,"MidiPort","","A \"marker\" struct to be used as a type parameter for the…",null,null],[3,"MetaData","","Represents general-purpose meta-data of an audio…",null,null],[12,"general_meta","","The meta-data about the application or plugin as a whole.",35,null],[12,"audio_port_meta","","Meta-data about the audio ports.",35,null],[12,"midi_port_meta","","Meta-data about the midi ports.",35,null],[3,"InOut","","Represents meta-data about a input and output ports.",null,null],[12,"inputs","","Meta-data of the input ports.",36,null],[12,"outputs","","Meta-data of the output ports.",36,null],[8,"Meta","","Define the meta-data for an application or plug-in.",null,null],[16,"MetaData","","The data-type that represents the meta-data.",37,null],[10,"meta","","Get the meta-data.",37,[[["self"]]]],[8,"General","","Define meta-data of an application or plugin as a whole.",null,null],[16,"GeneralData","","The data-type of the general meta-data.",38,null],[10,"general","","Get the general meta-data.",38,[[["self"]]]],[8,"Name","","Implement this trait to indicate that a type can be used…",null,null],[10,"name","","Get the name.",39,[[["self"]],["str"]]],[8,"Port","","Define meta-data for input ports and output ports.",null,null],[16,"PortData","","",40,null],[10,"in_ports","","",40,[[["self"]]]],[10,"out_ports","","",40,[[["self"]]]],[0,"test_utilities","rsynth","Utilities for testing.",null,null],[3,"DummyEventHandler","rsynth::test_utilities","",null,null],[3,"TestPlugin","","A plugin useful for writing automated tests.",null,null],[11,"new","","",41,[[["audiochunk"],["vec",["vec"]],["m"],["vec"],["vec",["audiochunk"]]],["self"]]],[11,"check_last","","",41,[[["self"]]]],[0,"utilities","rsynth","",null,null],[0,"polyphony","rsynth::utilities","Utility to facilitate genarating different sounds at the…",null,null],[3,"ToneIdentifier","rsynth::utilities::polyphony","Used to dispatch polyphonic event to the correct voice,…",null,null],[12,"0","","",42,null],[3,"RawMidiEventToneIdentifierDispatchClassifier","","",null,null],[4,"EventDispatchClass","","",null,null],[13,"Broadcast","","",43,null],[13,"AssignNewVoice","","",43,null],[13,"VoiceSpecific","","",43,null],[13,"ReleaseVoice","","",43,null],[4,"VoiceAssignment","","",null,null],[13,"None","","",44,null],[13,"All","","",44,null],[13,"Some","","",44,null],[0,"simple_event_dispatching","","Some basic event dispatching.",null,null],[3,"SimpleEventDispatcher","rsynth::utilities::polyphony::simple_event_dispatching","A simple event dispatcher.",null,null],[4,"SimpleVoiceState","","A simple voice state",null,null],[13,"Idle","","The voice is idle (in other words: doing nothing).",45,null],[13,"Releasing","","The voice has received a signal to stop, but is still…",45,null],[13,"Active","","The voice has not yet received a signal to stop and is…",45,null],[11,"new","","",46,[[["classifier"]],["self"]]],[8,"EventDispatchClassifier","rsynth::utilities::polyphony","",null,null],[16,"VoiceIdentifier","","",47,null],[10,"classify","","",47,[[["self"],["event"]],["eventdispatchclass"]]],[8,"Voice","","Implement this trait to inform the polyphonic event…",null,null],[10,"state","","",48,[[["self"]],["state"]]],[8,"VoiceAssigner","","",null,null],[16,"Voice","","",49,null],[11,"assign_event","","",49,[[["self"],["event"]],["voiceassignment"]]],[10,"find_active_voice","","",49,[[["self"]],[["option",["usize"]],["usize"]]]],[10,"find_idle_voice","","",49,[[["self"]],["usize"]]],[8,"EventDispatcher","","",null,null],[11,"dispatch_event","","",50,[[["self"],["event"]]]],[8,"ContextualEventDispatcher","","",null,null],[11,"dispatch_contextual_event","","Dispatch an event to the voice or voices that should…",51,[[["event"],["self"],["context"]]]],[8,"AudioHandlerMeta","rsynth","Define the maximum number of audio inputs and the maximum…",null,null],[10,"max_number_of_audio_inputs","","The maximum number of audio inputs supported. This method…",52,[[["self"]],["usize"]]],[10,"max_number_of_audio_outputs","","The maximum number of audio outputs supported. This method…",52,[[["self"]],["usize"]]],[8,"AudioHandler","","Define how sample-rate changes are handled.",null,null],[10,"set_sample_rate","","Called when the sample-rate changes. The backend should…",53,[[["self"],["f64"]]]],[8,"MidiHandlerMeta","","Define the maximum number of midi inputs and the maximum…",null,null],[10,"max_number_of_midi_inputs","","The maximum number of midi inputs supported. This method…",54,[[["self"]],["usize"]]],[10,"max_number_of_midi_outputs","","The maximum number of midi outputs supported. This method…",54,[[["self"]],["usize"]]],[8,"AudioRenderer","","Defines how audio is rendered.",null,null],[10,"render_buffer","","This method is called repeatedly for subsequent audio…",55,[[["self"],["audiobufferinout"]]]],[8,"ContextualAudioRenderer","","Defines how audio is rendered, similar to the…",null,null],[10,"render_buffer","","This method called repeatedly for subsequent buffers.",56,[[["context"],["self"],["audiobufferinout"]]]],[8,"CommonPluginMeta","","Provides common meta-data of the plugin or application to…",null,null],[10,"name","","The name of the plugin or application.",57,[[["self"]],["str"]]],[8,"CommonAudioPortMeta","","Provides some meta-data of the audio-ports used by the…",null,null],[11,"audio_input_name","","The name of the audio input with the given index. You can…",58,[[["self"],["usize"]],["string"]]],[11,"audio_output_name","","The name of the audio output with the given index. You can…",58,[[["self"],["usize"]],["string"]]],[8,"CommonMidiPortMeta","","Provides some meta-data of the midi-ports used by the…",null,null],[11,"midi_input_name","","The name of the midi input with the given index. You can…",59,[[["self"],["usize"]],["string"]]],[11,"midi_output_name","","The name of the midi output with the given index. You can…",59,[[["self"],["usize"]],["string"]]],[14,"audio_chunk","","Create an audio chunk. ## Example `// Create an audio…",null,null],[14,"vst_init","","A wrapper around the `plugin_main!` macro from the `vst`…",null,null],[11,"from","rsynth::buffer","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from_sample_","","",0,[[["s"]],["s"]]],[11,"to_sample_","","",0,[[],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from_sample_","","",1,[[["s"]],["s"]]],[11,"to_sample_","","",1,[[],["u"]]],[11,"from","","",60,[[["t"]],["t"]]],[11,"into","","",60,[[],["u"]]],[11,"into_iter","","",60,[[],["i"]]],[11,"try_from","","",60,[[["u"]],["result"]]],[11,"try_into","","",60,[[],["result"]]],[11,"borrow","","",60,[[["self"]],["t"]]],[11,"borrow_mut","","",60,[[["self"]],["t"]]],[11,"type_id","","",60,[[["self"]],["typeid"]]],[11,"from_sample_","","",60,[[["s"]],["s"]]],[11,"to_sample_","","",60,[[],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from_sample_","","",2,[[["s"]],["s"]]],[11,"to_sample_","","",2,[[],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from_sample_","","",3,[[["s"]],["s"]]],[11,"to_sample_","","",3,[[],["u"]]],[11,"from","rsynth::backend::combined","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from_sample_","","",15,[[["s"]],["s"]]],[11,"to_sample_","","",15,[[],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from_sample_","","",16,[[["s"]],["s"]]],[11,"to_sample_","","",16,[[],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from_sample_","","",17,[[["s"]],["s"]]],[11,"to_sample_","","",17,[[],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"into_iter","","",18,[[],["i"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"from_sample_","","",18,[[["s"]],["s"]]],[11,"to_sample_","","",18,[[],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"from_sample_","","",19,[[["s"]],["s"]]],[11,"to_sample_","","",19,[[],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from_sample_","","",4,[[["s"]],["s"]]],[11,"to_sample_","","",4,[[],["u"]]],[11,"from","rsynth::backend::combined::dummy","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from_sample_","","",5,[[["s"]],["s"]]],[11,"to_sample_","","",5,[[],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"into_iter","","",6,[[],["i"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from_sample_","","",6,[[["s"]],["s"]]],[11,"to_sample_","","",6,[[],["u"]]],[11,"from","rsynth::backend::combined::hound","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from_sample_","","",8,[[["s"]],["s"]]],[11,"to_sample_","","",8,[[],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from_sample_","","",9,[[["s"]],["s"]]],[11,"to_sample_","","",9,[[],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from_sample_","","",7,[[["s"]],["s"]]],[11,"to_sample_","","",7,[[],["u"]]],[11,"from","rsynth::backend::combined::memory","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from_sample_","","",10,[[["s"]],["s"]]],[11,"to_sample_","","",10,[[],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from_sample_","","",11,[[["s"]],["s"]]],[11,"to_sample_","","",11,[[],["u"]]],[11,"from","rsynth::backend::jack_backend","",61,[[["t"]],["t"]]],[11,"into","","",61,[[],["u"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"try_into","","",61,[[],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"type_id","","",61,[[["self"]],["typeid"]]],[11,"from_sample_","","",61,[[["s"]],["s"]]],[11,"to_sample_","","",61,[[],["u"]]],[11,"from","rsynth::backend::vst_backend","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from_sample_","","",21,[[["s"]],["s"]]],[11,"to_sample_","","",21,[[],["u"]]],[11,"from","rsynth::envelope","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from_sample_","","",23,[[["s"]],["s"]]],[11,"to_sample_","","",23,[[],["u"]]],[11,"from","rsynth::envelope::staircase_envelope","",62,[[["t"]],["t"]]],[11,"into","","",62,[[],["u"]]],[11,"into_iter","","",62,[[],["i"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"try_into","","",62,[[],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"type_id","","",62,[[["self"]],["typeid"]]],[11,"from_sample_","","",62,[[["s"]],["s"]]],[11,"to_sample_","","",62,[[],["u"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into","","",63,[[],["u"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"try_into","","",63,[[],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"type_id","","",63,[[["self"]],["typeid"]]],[11,"from_sample_","","",63,[[["s"]],["s"]]],[11,"to_sample_","","",63,[[],["u"]]],[11,"from","rsynth::event","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,[[["self"],["t"]]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from_sample_","","",33,[[["s"]],["s"]]],[11,"to_sample_","","",33,[[],["u"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"from_sample_","","",34,[[["s"]],["s"]]],[11,"to_sample_","","",34,[[],["u"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from_sample_","","",25,[[["s"]],["s"]]],[11,"to_sample_","","",25,[[],["u"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from_sample_","","",26,[[["s"]],["s"]]],[11,"to_sample_","","",26,[[],["u"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from_sample_","","",27,[[["s"]],["s"]]],[11,"to_sample_","","",27,[[],["u"]]],[11,"from","rsynth::event::event_queue","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from_sample_","","",30,[[["s"]],["s"]]],[11,"to_sample_","","",30,[[],["u"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"into","","",64,[[],["u"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"try_into","","",64,[[],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"type_id","","",64,[[["self"]],["typeid"]]],[11,"from_sample_","","",64,[[["s"]],["s"]]],[11,"to_sample_","","",64,[[],["u"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"into","","",65,[[],["u"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"try_into","","",65,[[],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"type_id","","",65,[[["self"]],["typeid"]]],[11,"from_sample_","","",65,[[["s"]],["s"]]],[11,"to_sample_","","",65,[[],["u"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"into","","",66,[[],["u"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"try_into","","",66,[[],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"type_id","","",66,[[["self"]],["typeid"]]],[11,"from_sample_","","",66,[[["s"]],["s"]]],[11,"to_sample_","","",66,[[],["u"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"into","","",67,[[],["u"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"try_into","","",67,[[],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"type_id","","",67,[[["self"]],["typeid"]]],[11,"from_sample_","","",67,[[["s"]],["s"]]],[11,"to_sample_","","",67,[[],["u"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from_sample_","","",28,[[["s"]],["s"]]],[11,"to_sample_","","",28,[[],["u"]]],[11,"from","rsynth::meta","",68,[[["t"]],["t"]]],[11,"into","","",68,[[],["u"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"try_into","","",68,[[],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"type_id","","",68,[[["self"]],["typeid"]]],[11,"from_sample_","","",68,[[["s"]],["s"]]],[11,"to_sample_","","",68,[[],["u"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into","","",69,[[],["u"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"try_into","","",69,[[],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"type_id","","",69,[[["self"]],["typeid"]]],[11,"from_sample_","","",69,[[["s"]],["s"]]],[11,"to_sample_","","",69,[[],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"from_sample_","","",35,[[["s"]],["s"]]],[11,"to_sample_","","",35,[[],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"into","","",36,[[],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"try_into","","",36,[[],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"type_id","","",36,[[["self"]],["typeid"]]],[11,"from_sample_","","",36,[[["s"]],["s"]]],[11,"to_sample_","","",36,[[],["u"]]],[11,"from","rsynth::test_utilities","",70,[[["t"]],["t"]]],[11,"into","","",70,[[],["u"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"try_into","","",70,[[],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"type_id","","",70,[[["self"]],["typeid"]]],[11,"from_sample_","","",70,[[["s"]],["s"]]],[11,"to_sample_","","",70,[[],["u"]]],[11,"max_number_of_audio_inputs","","",41,[[["self"]],["usize"]]],[11,"max_number_of_audio_outputs","","",41,[[["self"]],["usize"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from_sample_","","",41,[[["s"]],["s"]]],[11,"to_sample_","","",41,[[],["u"]]],[11,"from","rsynth::utilities::polyphony","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from_sample_","","",42,[[["s"]],["s"]]],[11,"to_sample_","","",42,[[],["u"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"into","","",71,[[],["u"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"try_into","","",71,[[],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"type_id","","",71,[[["self"]],["typeid"]]],[11,"from_sample_","","",71,[[["s"]],["s"]]],[11,"to_sample_","","",71,[[],["u"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from_sample_","","",43,[[["s"]],["s"]]],[11,"to_sample_","","",43,[[],["u"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"from_sample_","","",44,[[["s"]],["s"]]],[11,"to_sample_","","",44,[[],["u"]]],[11,"from","rsynth::utilities::polyphony::simple_event_dispatching","",46,[[["t"]],["t"]]],[11,"into","","",46,[[],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"try_into","","",46,[[],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"type_id","","",46,[[["self"]],["typeid"]]],[11,"from_sample_","","",46,[[["s"]],["s"]]],[11,"to_sample_","","",46,[[],["u"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from_sample_","","",45,[[["s"]],["s"]]],[11,"to_sample_","","",45,[[],["u"]]],[11,"number_of_channels","rsynth::backend::combined::dummy","",5,[[["self"]],["usize"]]],[11,"frames_per_second","","",5,[[["self"]],["u64"]]],[11,"fill_buffer","","",5,[[["self"],["audiobufferout"]],[["usize"],["result",["usize"]]]]],[11,"number_of_channels","rsynth::backend::combined::hound","",8,[[["self"]],["usize"]]],[11,"frames_per_second","","",8,[[["self"]],["u64"]]],[11,"fill_buffer","","",8,[[["self"],["audiobufferout"]],[["usize"],["result",["usize"]]]]],[11,"number_of_channels","rsynth::backend::combined::memory","",10,[[["self"]],["usize"]]],[11,"frames_per_second","","",10,[[["self"]],["u64"]]],[11,"fill_buffer","","",10,[[["self"],["audiobufferout"]],[["usize"],["result",["usize"]]]]],[11,"number_of_channels","rsynth::backend::combined","",16,[[["self"]],["usize"]]],[11,"frames_per_second","","",16,[[["self"]],["u64"]]],[11,"fill_buffer","","",16,[[["self"],["audiobufferout"]],[["usize"],["result",["usize"]]]]],[11,"write_buffer","rsynth::backend::combined::dummy","",5,[[["self"],["audiobufferin"]],["result"]]],[11,"write_buffer","rsynth::backend::combined::hound","",9,[[["self"],["audiobufferin"]],["result"]]],[11,"write_buffer","rsynth::backend::combined::memory","",11,[[["self"],["audiobufferin"]],["result"]]],[11,"write_buffer","rsynth::backend::combined","",17,[[["self"],["audiobufferin"]],["result"]]],[11,"write_event","rsynth::backend::combined::dummy","",6,[[["self"],["deltaevent",["rawmidievent"]],["rawmidievent"]]]],[11,"write_event","rsynth::backend::combined","",19,[[["self"],["deltaevent",["rawmidievent"]],["rawmidievent"]]]],[11,"output_initialized","rsynth::backend::jack_backend","",61,[[["self"]],["bool"]]],[11,"stop","","",61,[[["self"]]]],[11,"iter","rsynth::envelope::staircase_envelope","",63,[[["self"]]]],[11,"insert_event","","",63,[[["timed"],["self"]]]],[11,"forget_past","","",63,[[["self"],["u32"]]]],[11,"decide_on_collision","rsynth::event::event_queue","",64,[[["t"],["self"]],["eventcollisionhandling"]]],[11,"decide_on_collision","","",65,[[["t"],["self"]],["eventcollisionhandling"]]],[11,"decide_on_collision","","",66,[[["t"],["self"]],["eventcollisionhandling"]]],[11,"decide_on_collision","","",67,[[["t"],["self"]],["eventcollisionhandling"]]],[11,"handle_event","rsynth::backend::combined","",15,[[["timed",["rawmidievent"]],["self"],["rawmidievent"]]]],[11,"handle_event","rsynth::backend::jack_backend","",61,[[["timed",["rawmidievent"]],["self"],["indexed",["timed"]]]]],[11,"handle_event","","",61,[[["self"],["timed",["sysexevent"]],["indexed",["timed"]]]]],[11,"handle_event","rsynth::test_utilities","",70,[[["self"],["e"]]]],[11,"handle_event","","",41,[[["self"],["e"]]]],[11,"handle_event","","",70,[[["c"],["self"],["e"]]]],[11,"general","rsynth::meta","",35,[[["self"]],["g"]]],[11,"in_ports","","",35,[[["self"]]]],[11,"out_ports","","",35,[[["self"]]]],[11,"in_ports","","",35,[[["self"]]]],[11,"out_ports","","",35,[[["self"]]]],[11,"classify","rsynth::utilities::polyphony","",71,[[["self"],["event"]],["eventdispatchclass"]]],[11,"classify","rsynth::utilities::polyphony::simple_event_dispatching","",46,[[["self"],["event"]],["eventdispatchclass"]]],[11,"find_active_voice","","",46,[[["self"]],[["option",["usize"]],["usize"]]]],[11,"find_idle_voice","","",46,[[["self"]],["usize"]]],[11,"max_number_of_audio_inputs","rsynth::test_utilities","",41,[[["self"]],["usize"]]],[11,"max_number_of_audio_outputs","","",41,[[["self"]],["usize"]]],[11,"set_sample_rate","","",41,[[["self"],["f64"]]]],[11,"render_buffer","","",41,[[["c"],["self"],["audiobufferinout"]]]],[11,"as_mut","rsynth::event","",34,[[["self"]],["rawmidievent"]]],[11,"as_mut","","",25,[[["self"]],["e"]]],[11,"as_mut","","",26,[[["self"]],["e"]]],[11,"as_ref","","",34,[[["self"]],["rawmidievent"]]],[11,"as_ref","","",25,[[["self"]],["e"]]],[11,"as_ref","","",26,[[["self"]],["e"]]],[11,"next","rsynth::buffer","",60,[[["self"]],["option"]]],[11,"next","rsynth::backend::combined::dummy","",6,[[["self"]],["option"]]],[11,"next","rsynth::backend::combined","",18,[[["self"]],[["option",["deltaevent"]],["deltaevent",["rawmidievent"]]]]],[11,"next","rsynth::envelope::staircase_envelope","",62,[[["self"]],["option"]]],[11,"clone","rsynth::buffer","",0,[[["self"]],["audiobufferin"]]],[11,"clone","","",3,[[["self"]],["audiochunk"]]],[11,"clone","rsynth::envelope","",23,[[["self"]],["envelopeiteratoritem"]]],[11,"clone","rsynth::event","",33,[[["self"]],["sysexevent"]]],[11,"clone","","",34,[[["self"]],["rawmidievent"]]],[11,"clone","","",25,[[["self"]],["self"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"clone","","",27,[[["self"]],["deltaevent"]]],[11,"clone","rsynth::utilities::polyphony","",42,[[["self"]],["toneidentifier"]]],[11,"clone","","",44,[[["self"]],["voiceassignment"]]],[11,"clone","rsynth::utilities::polyphony::simple_event_dispatching","",45,[[["self"]],["simplevoicestate"]]],[11,"default","rsynth::utilities::polyphony","",71,[[],["rawmidieventtoneidentifierdispatchclassifier"]]],[11,"default","rsynth::utilities::polyphony::simple_event_dispatching","",46,[[],["self"]]],[11,"eq","rsynth::buffer","",3,[[["self"],["audiochunk"]],["bool"]]],[11,"ne","","",3,[[["self"],["audiochunk"]],["bool"]]],[11,"eq","rsynth::envelope","",23,[[["self"],["envelopeiteratoritem"]],["bool"]]],[11,"ne","","",23,[[["self"],["envelopeiteratoritem"]],["bool"]]],[11,"eq","rsynth::event","",33,[[["self"],["sysexevent"]],["bool"]]],[11,"ne","","",33,[[["self"],["sysexevent"]],["bool"]]],[11,"eq","","",34,[[["rawmidievent"],["self"]],["bool"]]],[11,"ne","","",34,[[["rawmidievent"],["self"]],["bool"]]],[11,"eq","","",25,[[["self"],["timed"]],["bool"]]],[11,"ne","","",25,[[["self"],["timed"]],["bool"]]],[11,"eq","","",26,[[["self"],["indexed"]],["bool"]]],[11,"ne","","",26,[[["self"],["indexed"]],["bool"]]],[11,"eq","","",27,[[["self"],["deltaevent"]],["bool"]]],[11,"ne","","",27,[[["self"],["deltaevent"]],["bool"]]],[11,"eq","rsynth::utilities::polyphony","",42,[[["toneidentifier"],["self"]],["bool"]]],[11,"ne","","",42,[[["toneidentifier"],["self"]],["bool"]]],[11,"eq","","",44,[[["voiceassignment"],["self"]],["bool"]]],[11,"ne","","",44,[[["voiceassignment"],["self"]],["bool"]]],[11,"eq","rsynth::utilities::polyphony::simple_event_dispatching","",45,[[["simplevoicestate"],["self"]],["bool"]]],[11,"ne","","",45,[[["simplevoicestate"],["self"]],["bool"]]],[11,"deref","rsynth::event::event_queue","",30,[[["self"]]]],[11,"fmt","rsynth::buffer","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","rsynth::backend::combined","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","rsynth::envelope","",23,[[["formatter"],["self"]],["result"]]],[11,"fmt","rsynth::event","",33,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",34,[[["formatter"],["self"]],[["error"],["result",["error"]]]]],[11,"fmt","","",25,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",26,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",27,[[["formatter"],["self"]],["result"]]],[11,"fmt","rsynth::utilities::polyphony","",42,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",44,[[["formatter"],["self"]],["result"]]],[11,"index","rsynth::event::event_queue","",30,[[["self"],["usize"]]]],[11,"index_mut","","",30,[[["self"],["usize"]]]]],"p":[[3,"AudioBufferIn"],[3,"AudioBufferOut"],[3,"AudioBufferInOut"],[3,"AudioChunk"],[4,"CombinedError"],[3,"AudioDummy"],[3,"MidiDummy"],[4,"HoundAudioError"],[3,"HoundAudioReader"],[3,"HoundAudioWriter"],[3,"AudioBufferReader"],[3,"AudioBufferWriter"],[8,"AudioReader"],[8,"AudioWriter"],[8,"MidiWriter"],[3,"MidiWriterWrapper"],[3,"TestAudioReader"],[3,"TestAudioWriter"],[3,"TestMidiReader"],[3,"TestMidiWriter"],[8,"VstPluginMeta"],[3,"VstPluginWrapper"],[8,"HostInterface"],[3,"EnvelopeIteratorItem"],[8,"Envelope"],[3,"Timed"],[3,"Indexed"],[3,"DeltaEvent"],[4,"EventCollisionHandling"],[8,"HandleEventCollision"],[3,"EventQueue"],[8,"EventHandler"],[8,"ContextualEventHandler"],[3,"SysExEvent"],[3,"RawMidiEvent"],[3,"MetaData"],[3,"InOut"],[8,"Meta"],[8,"General"],[8,"Name"],[8,"Port"],[3,"TestPlugin"],[3,"ToneIdentifier"],[4,"EventDispatchClass"],[4,"VoiceAssignment"],[4,"SimpleVoiceState"],[3,"SimpleEventDispatcher"],[8,"EventDispatchClassifier"],[8,"Voice"],[8,"VoiceAssigner"],[8,"EventDispatcher"],[8,"ContextualEventDispatcher"],[8,"AudioHandlerMeta"],[8,"AudioHandler"],[8,"MidiHandlerMeta"],[8,"AudioRenderer"],[8,"ContextualAudioRenderer"],[8,"CommonPluginMeta"],[8,"CommonAudioPortMeta"],[8,"CommonMidiPortMeta"],[3,"AudioBufferOutChannelIteratorMut"],[3,"JackHost"],[3,"StairCaseEnvelopeIterator"],[3,"StairCaseEnvelope"],[3,"AlwaysInsertNewBeforeOld"],[3,"AlwaysInsertNewAfterOld"],[3,"AlwaysIgnoreNew"],[3,"AlwaysRemoveOld"],[3,"AudioPort"],[3,"MidiPort"],[3,"DummyEventHandler"],[3,"RawMidiEventToneIdentifierDispatchClassifier"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);