var N = null;var searchIndex = {};
searchIndex["rsynth"]={"doc":"Rsynth  A crate for developing audio plugins and applications in Rust, with a focus on software synthesis.  Rsynth is well suited as a bootstrap for common audio plugin generators.  It handles voices, voice-stealing, polyphony, etc. so the programmer's main focus can be DSP.","items":[[0,"dev_utilities","rsynth","Utilities to be used when developing backends and middleware.",N,N],[3,"TestPlugin","rsynth::dev_utilities","A plugin useful for writing automated tests.",N,N],[0,"chunk","","",N,N],[3,"AudioChunk","rsynth::dev_utilities::chunk","",N,N],[5,"buffers_as_slice","","",N,[[["vec"],["usize"]],["vec"]]],[5,"buffers_as_mut_slice","","",N,[[["vec"],["usize"]],["vec"]]],[11,"zero","","",0,[[["usize"],["usize"]],["self"]]],[11,"from_channels","","",0,[[["vec",["vec"]]],["self"]]],[11,"new","","",0,[[["usize"]],["self"]]],[11,"channels","","",0,[[["self"]],["vec"]]],[11,"append_sliced_chunk","","",0,N],[11,"inner","","",0,[[["self"]],["vec",["vec"]]]],[11,"as_slices","","",0,[[["self"]],["vec"]]],[11,"as_mut_slices","","",0,[[["self"]],["vec"]]],[11,"split","","",0,[[["self"],["usize"]],["vec"]]],[11,"new","rsynth::dev_utilities","",1,[[["vec",["audiochunk"]],["vec",["audiochunk"]],["vec",["vec"]],["vec",["vec"]],["m"]],["self"]]],[11,"check_last","","",1,[[["self"]]]],[0,"backend","rsynth","Defines the different backends.",N,N],[0,"combined","rsynth::backend","",N,N],[3,"DeltaEvent","rsynth::backend::combined","",N,N],[3,"PeakableMidiReader","","",N,N],[3,"MidiWriterWrapper","","",N,N],[3,"TestWriter","","",N,N],[3,"TestMidiReader","","",N,N],[3,"TestMidiWriter","","",N,N],[5,"run","","",N,[[["r"],["usize"],["audioin"],["audioout"],["midiin"],["midiout"]]]],[0,"dummy","","",N,N],[3,"AudioDummy","rsynth::backend::combined::dummy","",N,N],[3,"MidiDummy","","",N,N],[11,"new","","",2,[[],["self"]]],[11,"new","","",3,[[],["self"]]],[0,"hound","rsynth::backend::combined","",N,N],[3,"HoundAudioReader","rsynth::backend::combined::hound","",N,N],[3,"HoundAudioWriter","","",N,N],[4,"HoundAudioError","","",N,N],[13,"UnsupportedAudioFormat","","",4,N],[11,"new","","",5,[[["wavreader"]],["result",["houndaudioerror"]]]],[11,"new","","",6,[[["wavwriter"]],["result",["houndaudioerror"]]]],[0,"memory","rsynth::backend::combined","",N,N],[3,"AudioBufferReader","rsynth::backend::combined::memory","",N,N],[3,"AudioBufferWriter","","",N,N],[11,"new","","",7,[[["audiochunk"],["u64"]],["self"]]],[11,"new","","",8,[[["audiochunk"]],["self"]]],[0,"rimd","rsynth::backend::combined","",N,N],[3,"RimdMidiReader","rsynth::backend::combined::rimd","",N,N],[3,"RimdMidiWriter","","",N,N],[4,"MidiHandleError","","",N,N],[13,"NotOneTrack","","",9,N],[12,"number_of_tracks","rsynth::backend::combined::rimd::MidiHandleError","",9,N],[13,"TimeDivisionNotSupported","rsynth::backend::combined::rimd","",9,N],[13,"TempoSetMoreThanOnce","","",9,N],[13,"TempoSetParseError","","",9,N],[11,"ticks_per_microsecond","","",10,[[["self"]],["f64"]]],[11,"new","","",10,[[["smf"],["usize"]],["self"]]],[11,"new","","",11,[[["u32"],["u16"]],["self"]]],[11,"get_smf","","",11,[[["self"]],["smf"]]],[17,"MICROSECONDS_PER_SECOND","rsynth::backend::combined","",N,N],[8,"AudioReader","","",N,N],[10,"number_of_channels","","",12,[[["self"]],["usize"]]],[10,"frames_per_second","","",12,[[["self"]],["u64"]]],[10,"fill_buffer","","Fill the buffers. Return the number of frames that have been written. If it is `<` the number of frames in the input, now more frames can be expected.",12,N],[8,"AudioWriter","","",N,N],[10,"write_buffer","","",13,N],[8,"MidiReader","","",N,N],[10,"read_event","","",14,[[["self"]],["option",["deltaevent"]]]],[11,"peakable","","",14,[[["self"]],["peakablemidireader"]]],[8,"MidiWriter","","",N,N],[10,"write_event","","",15,[[["self"],["deltaevent",["rawmidievent"]]]]],[11,"new","","",16,[[["r"]],["self"]]],[11,"peak","","",16,[[["self"]],["option",["deltaevent"]]]],[11,"new","","",17,[[["w"],["f64"]],["self"]]],[11,"step_frames","","",17,[[["self"],["u64"]]]],[11,"new","","",18,[[["t"],["vec",["audiochunk"]]],["self"]]],[11,"new","","",19,[[["vec",["deltaevent"]]],["self"]]],[11,"new","","",20,[[["vec",["deltaevent"]]],["self"]]],[11,"check_last","","",20,[[["self"]]]],[0,"jack_backend","rsynth::backend","Wrapper for the [JACK] backend. Support is only enabled if you compile with the \"backend-jack\" feature, see [the cargo reference] for more information on setting cargo features.",N,N],[3,"JackHost","rsynth::backend::jack_backend","",N,N],[5,"run","","Run the plugin until the user presses a key on the computer keyboard.",N,[[["p"]],["option"]]],[0,"vst_backend","rsynth::backend","Wrapper for the VST backend.",N,N],[3,"VstPluginWrapper","rsynth::backend::vst_backend","A struct used internally by the `vst_init` macro. Normally, plugin's do not need to use this.",N,N],[8,"VstPluginMeta","","A VST plugin should implement this trait in addition to some other traits.",N,N],[10,"plugin_id","","",21,[[["self"]],["i32"]]],[10,"category","","",21,[[["self"]],["category"]]],[11,"get_info","","",22,[[["self"]],["info"]]],[11,"new","","",22,[[["p"],["hostcallback"]],["self"]]],[11,"host","","",22,[[["self"]],["hostcallback"]]],[11,"process","","",22,[[["self"],["audiobuffer"]]]],[11,"process_f64","","",22,[[["self"],["audiobuffer"]]]],[11,"get_input_info","","",22,[[["self"],["i32"]],["channelinfo"]]],[11,"get_output_info","","",22,[[["self"],["i32"]],["channelinfo"]]],[11,"process_events","","",22,[[["self"],["events"]]]],[11,"set_sample_rate","","",22,[[["self"],["f64"]]]],[8,"HostInterface","rsynth::backend","Defines an interface for communicating with the host or server of the backend, e.g. the VST host when using VST or the  Jack server when using Jack.",N,N],[10,"output_initialized","","Return whether the output buffers are zero-initialized. Returns `false` when in doubt.",23,[[["self"]],["bool"]]],[0,"envelope","rsynth","",N,N],[3,"EnvelopeIteratorItem","rsynth::envelope","",N,N],[12,"item","","",24,N],[12,"has_updated","","",24,N],[0,"staircase_envelope","","",N,N],[3,"StairCaseEnvelopeIterator","rsynth::envelope::staircase_envelope","",N,N],[3,"StairCaseEnvelope","","",N,N],[8,"Envelope","rsynth::envelope","Defines the behaviour of an envelope. An envelope allows to get an iterator. The returned iterator allows to iterator over the frames, starting from the current position, and for each frame, returns the envelope value at that frame.",N,N],[16,"Iter","","The type of the iterator.",25,N],[16,"EventType","","",25,N],[10,"iter","","Get the iterator.",25,N],[10,"insert_event","","",25,N],[10,"forget_past","","",25,[[["self"],["u32"]]]],[0,"event","rsynth","This module defines the `EventHandler` trait and some event types: `RawMidiEvent`, `SysExEvent`, ...",N,N],[3,"SysExEvent","rsynth::event","A System Exclusive (\"SysEx\") event.",N,N],[3,"RawMidiEvent","","A raw midi event.",N,N],[3,"Timed","","`Timed<E>` adds timing to an event.",N,N],[12,"time_in_frames","","The offset (in frames) of the event relative to the start of the audio buffer.",26,N],[12,"event","","The underlying event.",26,N],[3,"Indexed","","`Indexed<E>` adds an index to an event.",N,N],[12,"index","","The index of the event",27,N],[12,"event","","The underlying event.",27,N],[0,"event_queue","","",N,N],[3,"EventQueue","rsynth::event::event_queue","",N,N],[3,"AlwaysInsertNewBeforeOld","","",N,N],[3,"AlwaysInsertNewAfterOld","","",N,N],[3,"AlwaysIgnoreNew","","",N,N],[3,"AlwaysRemoveOld","","",N,N],[3,"Iter","","",N,N],[4,"EventCollisionHandling","","",N,N],[13,"InsertNewBeforeOld","","",28,N],[13,"InsertNewAfterOld","","",28,N],[13,"IgnoreNew","","",28,N],[13,"RemoveOld","","",28,N],[8,"HandleEventCollision","","",N,N],[10,"decide_on_collision","","",29,[[["self"],["t"],["t"]],["eventcollisionhandling"]]],[11,"new","","",30,[[["usize"]],["self"]]],[11,"len","","",30,[[["self"]],["usize"]]],[11,"queue_event","","Queue a new event. When the buffer is full, an element may be removed from the queue to make some room. This element is returned.",30,[[["self"],["timed"],["h"]],["option",["timed"]]]],[11,"forget_before","","Remove all events before, but not on, this threshold.",30,[[["self"],["u32"]]]],[11,"clear","","Remove all events from the queue.",30,[[["self"]]]],[11,"shift_time","","Shift time forward by `new_zero_time` frames.",30,[[["self"],["u32"]]]],[11,"get_last_before","","",30,[[["self"],["u32"]],["option",["timed"]]]],[11,"first","","",30,[[["self"]],["option",["timed"]]]],[11,"iter","","",30,[[["self"]],["iter",["timed"]]]],[0,"raw_midi_event_event_types","rsynth::event","",N,N],[17,"RAW_MIDI_EVENT_EVENT_TYPE_MASK","rsynth::event::raw_midi_event_event_types","",N,N],[17,"RAW_MIDI_EVENT_NOTE_OFF","","",N,N],[17,"RAW_MIDI_EVENT_NOTE_ON","","",N,N],[17,"RAW_MIDI_EVENT_NOTE_AFTERTOUCH","","",N,N],[17,"RAW_MIDI_EVENT_CONTROLLER","","",N,N],[17,"RAW_MIDI_EVENT_PROGRAM_CHANGE","","",N,N],[17,"RAW_MIDI_EVENT_CHANNEL_AFTERTOUCH","","",N,N],[17,"RAW_MIDI_EVENT_PITCH_BEND","","",N,N],[17,"RAW_MIDI_EVENT_META","","",N,N],[8,"EventHandler","rsynth::event","The trait that plugins should implement in order to handle the given type of events.",N,N],[10,"handle_event","","",31,[[["self"],["e"]]]],[8,"ContextualEventHandler","","",N,N],[10,"handle_event","","",32,[[["self"],["e"],["context"]]]],[11,"new","","Create a new `SysExEvent` with the given `data`.",33,N],[11,"data","","Get the data from the `SysExEvent`",33,N],[11,"new","","Create a new `RawMidiEvent` with the given raw data.",34,N],[11,"try_new","","Try to create a new `RawMidiEvent` with the given raw data. Return None when `data` does not have length 1, 2 or 3.",34,N],[11,"data","","Get the raw data from a `RawMidiEvent`.",34,N],[11,"new","","",26,[[["u32"],["e"]],["self"]]],[11,"new","","",27,[[["usize"],["e"]],["self"]]],[0,"middleware","rsynth","Middleware like support for polyphony, ...",N,N],[0,"timesplit","rsynth::middleware","",N,N],[3,"TimeChunk","rsynth::middleware::timesplit","",N,N],[12,"event","","",35,N],[12,"inputs","","",35,N],[12,"outputs","","",35,N],[3,"TimeChunkIterator","","",N,N],[3,"TimeSplitter","","",N,N],[11,"new","","",36,[[["usize"]],["self"]]],[11,"queue_event","","",36,[[["self"],["timed"]],["option",["timed"]]]],[11,"chunk","","",36,N],[0,"utilities","rsynth","",N,N],[5,"initialize_to_zero","rsynth::utilities","Initialize a slice of buffers to zero.",N,N],[0,"polyphony","","Polyphony consists of different steps:",N,N],[3,"ToneIdentifier","rsynth::utilities::polyphony","",N,N],[12,"0","","",37,N],[3,"RawMidiEventToneIdentifierDispatchClassifier","","",N,N],[4,"EventDispatchClass","","",N,N],[13,"Broadcast","","",38,N],[13,"AssignNewVoice","","",38,N],[13,"VoiceSpecific","","",38,N],[13,"ReleaseVoice","","",38,N],[4,"VoiceAssignment","","",N,N],[13,"None","","",39,N],[13,"All","","",39,N],[13,"Some","","",39,N],[0,"simple_event_dispatching","","",N,N],[3,"SimpleEventDispatcher","rsynth::utilities::polyphony::simple_event_dispatching","",N,N],[4,"SimpleVoiceState","","",N,N],[13,"Idle","","",40,N],[13,"Releasing","","",40,N],[13,"Active","","",40,N],[11,"new","","",41,[[["classifier"]],["self"]]],[8,"EventDispatchClassifier","rsynth::utilities::polyphony","",N,N],[16,"VoiceIdentifier","","",42,N],[10,"classify","","",42,[[["self"],["event"]],["eventdispatchclass"]]],[8,"Voice","","",N,N],[10,"state","","",43,[[["self"]],["state"]]],[8,"VoiceAssigner","","",N,N],[16,"Voice","","",44,N],[11,"assign_event","","",44,N],[10,"find_active_voice","","",44,N],[10,"find_idle_voice","","",44,N],[8,"EventDispatcher","","",N,N],[11,"dispatch_event","","",45,N],[8,"ContextualEventDispatcher","","",N,N],[11,"dispatch_contextual_event","","",46,N],[0,"metaconfig","rsynth","Example ------- ``` use rsynth::metaconfig::{Meta, MetaData, InOut}; struct MyPlugin {     meta: MetaData<&'static str, &'static str, &'static str> /* ... */ }",N,N],[3,"MidiPort","rsynth::metaconfig","A \"marker\" struct",N,N],[3,"AudioPort","","A \"marker\" struct",N,N],[3,"MetaData","","",N,N],[12,"general_meta","","",47,N],[12,"audio_port_meta","","",47,N],[12,"midi_port_meta","","",47,N],[3,"InOut","","",N,N],[12,"inputs","","",48,N],[12,"outputs","","",48,N],[8,"Meta","","",N,N],[16,"MetaData","","",49,N],[10,"meta","","",49,N],[8,"General","","",N,N],[16,"GeneralData","","",50,N],[10,"general","","",50,N],[8,"Name","","",N,N],[10,"name","","",51,[[["self"]],["str"]]],[8,"Port","","",N,N],[16,"PortData","","",52,N],[10,"in_ports","","",52,N],[10,"out_ports","","",52,N],[8,"AudioHandlerMeta","rsynth","Define the maximum number of audioinputs and the maximum number of audio outputs. Also defines how sample rate changes are handled. This trait can be more conveniently implemented by implementing the `Meta` trait.",N,N],[10,"max_number_of_audio_inputs","","The maximum number of audio inputs supported. This method should return the same value for subsequent calls.",53,[[["self"]],["usize"]]],[10,"max_number_of_audio_outputs","","The maximum number of audio outputs supported. This method should return the same value for subsequent calls.",53,[[["self"]],["usize"]]],[8,"AudioHandler","","",N,N],[10,"set_sample_rate","","Called when the sample-rate changes. The backend should ensure that this function is called before any other.",54,[[["self"],["f64"]]]],[8,"MidiHandlerMeta","","Define the maximum number of midi inputs and the maximum number of midi outputs. This trait can be more conveniently implemented by implementing the [`Meta`] trait.",N,N],[10,"max_number_of_midi_inputs","","The maximum number of midi inputs supported. This method should return the same value for subsequent calls.",55,[[["self"]],["usize"]]],[10,"max_number_of_midi_outputs","","The maximum number of midi outputs supported. This method should return the same value for subsequent calls.",55,[[["self"]],["usize"]]],[8,"AudioRenderer","","Defines how audio is rendered.",N,N],[10,"render_buffer","","This method is called repeatedly for subsequent buffers.",56,N],[8,"ContextualAudioRenderer","","Defines how audio is rendered, similar to the `AudioRenderer` trait. The extra parameter `context` can be used by the backend to provide extra information.",N,N],[10,"render_buffer","","This method called repeatedly for subsequent buffers.",57,N],[8,"CommonPluginMeta","","Provides common meta-data of the plugin or application to the host. This trait is common for all backends that need this info. This trait can be more conveniently implemented by implementing the [`Meta`] trait.",N,N],[10,"name","","The name of the plugin or application.",58,[[["self"]],["str"]]],[8,"CommonAudioPortMeta","","Provides some meta-data of the audio-ports used by the plugin or application to the host. This trait can be more conveniently implemented by implementing the [`Meta`] trait.",N,N],[11,"audio_input_name","","The name of the audio input with the given index. You can assume that `index` is strictly smaller than [`Self::max_number_of_audio_inputs()`].",59,[[["self"],["usize"]],["string"]]],[11,"audio_output_name","","The name of the audio output with the given index. You can assume that `index` is strictly smaller than [`Self::max_number_of_audio_outputs()`].",59,[[["self"],["usize"]],["string"]]],[8,"CommonMidiPortMeta","","Provides some meta-data of the midi-ports used by the plugin or application to the host. This trait can be more conveniently implemented by implementing the [`Meta`] trait.",N,N],[11,"midi_input_name","","The name of the midi input with the given index. You can assume that `index` is strictly smaller than [`Self::max_number_of_midi_inputs()`].",60,[[["self"],["usize"]],["string"]]],[11,"midi_output_name","","The name of the midi output with the given index. You can assume that `index` is strictly smaller than [`Self::max_number_of_midi_outputs()`]",60,[[["self"],["usize"]],["string"]]],[14,"audio_chunk","","",N,N],[14,"vst_init","","A wrapper around the `plugin_main!` macro from the `vst` crate. You call this with one parameter, which is the function declaration of a function that creates your plugin. This function may also do some setup (e.g. initialize logging).",N,N],[11,"max_number_of_audio_inputs","rsynth::dev_utilities","",1,[[["self"]],["usize"]]],[11,"max_number_of_audio_outputs","","",1,[[["self"]],["usize"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"from_sample_","","",1,[[["s"]],["s"]]],[11,"to_sample_","","",1,[[["self"]],["u"]]],[11,"into","rsynth::dev_utilities::chunk","",0,[[["self"]],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,N],[11,"from","","",0,[[["t"]],["t"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"get_type_id","","",0,[[["self"]],["typeid"]]],[11,"try_into","","",0,[[["self"]],["result"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"from_sample_","","",0,[[["s"]],["s"]]],[11,"to_sample_","","",0,[[["self"]],["u"]]],[11,"into","rsynth::backend::combined","",61,[[["self"]],["u"]]],[11,"to_owned","","",61,[[["self"]],["t"]]],[11,"clone_into","","",61,N],[11,"from","","",61,[[["t"]],["t"]]],[11,"try_from","","",61,[[["u"]],["result"]]],[11,"borrow","","",61,[[["self"]],["t"]]],[11,"get_type_id","","",61,[[["self"]],["typeid"]]],[11,"try_into","","",61,[[["self"]],["result"]]],[11,"borrow_mut","","",61,[[["self"]],["t"]]],[11,"from_sample_","","",61,[[["s"]],["s"]]],[11,"to_sample_","","",61,[[["self"]],["u"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"from_sample_","","",16,[[["s"]],["s"]]],[11,"to_sample_","","",16,[[["self"]],["u"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"from_sample_","","",17,[[["s"]],["s"]]],[11,"to_sample_","","",17,[[["self"]],["u"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"from_sample_","","",18,[[["s"]],["s"]]],[11,"to_sample_","","",18,[[["self"]],["u"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"from_sample_","","",19,[[["s"]],["s"]]],[11,"to_sample_","","",19,[[["self"]],["u"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"from_sample_","","",20,[[["s"]],["s"]]],[11,"to_sample_","","",20,[[["self"]],["u"]]],[11,"into","rsynth::backend::combined::dummy","",2,[[["self"]],["u"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"from_sample_","","",2,[[["s"]],["s"]]],[11,"to_sample_","","",2,[[["self"]],["u"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"from_sample_","","",3,[[["s"]],["s"]]],[11,"to_sample_","","",3,[[["self"]],["u"]]],[11,"into","rsynth::backend::combined::hound","",5,[[["self"]],["u"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"from_sample_","","",5,[[["s"]],["s"]]],[11,"to_sample_","","",5,[[["self"]],["u"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"from_sample_","","",6,[[["s"]],["s"]]],[11,"to_sample_","","",6,[[["self"]],["u"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"from_sample_","","",4,[[["s"]],["s"]]],[11,"to_sample_","","",4,[[["self"]],["u"]]],[11,"into","rsynth::backend::combined::memory","",7,[[["self"]],["u"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"from_sample_","","",7,[[["s"]],["s"]]],[11,"to_sample_","","",7,[[["self"]],["u"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"from_sample_","","",8,[[["s"]],["s"]]],[11,"to_sample_","","",8,[[["self"]],["u"]]],[11,"into","rsynth::backend::combined::rimd","",10,[[["self"]],["u"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"from_sample_","","",10,[[["s"]],["s"]]],[11,"to_sample_","","",10,[[["self"]],["u"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"from_sample_","","",11,[[["s"]],["s"]]],[11,"to_sample_","","",11,[[["self"]],["u"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"from_sample_","","",9,[[["s"]],["s"]]],[11,"to_sample_","","",9,[[["self"]],["u"]]],[11,"into","rsynth::backend::jack_backend","",62,[[["self"]],["u"]]],[11,"from","","",62,[[["t"]],["t"]]],[11,"try_from","","",62,[[["u"]],["result"]]],[11,"borrow","","",62,[[["self"]],["t"]]],[11,"get_type_id","","",62,[[["self"]],["typeid"]]],[11,"try_into","","",62,[[["self"]],["result"]]],[11,"borrow_mut","","",62,[[["self"]],["t"]]],[11,"from_sample_","","",62,[[["s"]],["s"]]],[11,"to_sample_","","",62,[[["self"]],["u"]]],[11,"into","rsynth::backend::vst_backend","",22,[[["self"]],["u"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"from_sample_","","",22,[[["s"]],["s"]]],[11,"to_sample_","","",22,[[["self"]],["u"]]],[11,"into","rsynth::envelope","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"from","","",24,[[["t"]],["t"]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"from_sample_","","",24,[[["s"]],["s"]]],[11,"to_sample_","","",24,[[["self"]],["u"]]],[11,"into","rsynth::envelope::staircase_envelope","",63,[[["self"]],["u"]]],[11,"from","","",63,[[["t"]],["t"]]],[11,"into_iter","","",63,[[["self"]],["i"]]],[11,"try_from","","",63,[[["u"]],["result"]]],[11,"borrow","","",63,[[["self"]],["t"]]],[11,"get_type_id","","",63,[[["self"]],["typeid"]]],[11,"try_into","","",63,[[["self"]],["result"]]],[11,"borrow_mut","","",63,[[["self"]],["t"]]],[11,"from_sample_","","",63,[[["s"]],["s"]]],[11,"to_sample_","","",63,[[["self"]],["u"]]],[11,"into","","",64,[[["self"]],["u"]]],[11,"from","","",64,[[["t"]],["t"]]],[11,"try_from","","",64,[[["u"]],["result"]]],[11,"borrow","","",64,[[["self"]],["t"]]],[11,"get_type_id","","",64,[[["self"]],["typeid"]]],[11,"try_into","","",64,[[["self"]],["result"]]],[11,"borrow_mut","","",64,[[["self"]],["t"]]],[11,"from_sample_","","",64,[[["s"]],["s"]]],[11,"to_sample_","","",64,[[["self"]],["u"]]],[11,"into","rsynth::event","",33,[[["self"]],["u"]]],[11,"to_owned","","",33,[[["self"]],["t"]]],[11,"clone_into","","",33,N],[11,"from","","",33,[[["t"]],["t"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"from_sample_","","",33,[[["s"]],["s"]]],[11,"to_sample_","","",33,[[["self"]],["u"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,N],[11,"from","","",34,[[["t"]],["t"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"from_sample_","","",34,[[["s"]],["s"]]],[11,"to_sample_","","",34,[[["self"]],["u"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"from","","",26,[[["t"]],["t"]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"from_sample_","","",26,[[["s"]],["s"]]],[11,"to_sample_","","",26,[[["self"]],["u"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"from","","",27,[[["t"]],["t"]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"from_sample_","","",27,[[["s"]],["s"]]],[11,"to_sample_","","",27,[[["self"]],["u"]]],[11,"into","rsynth::event::event_queue","",30,[[["self"]],["u"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"get_type_id","","",30,[[["self"]],["typeid"]]],[11,"try_into","","",30,[[["self"]],["result"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"from_sample_","","",30,[[["s"]],["s"]]],[11,"to_sample_","","",30,[[["self"]],["u"]]],[11,"into","","",65,[[["self"]],["u"]]],[11,"from","","",65,[[["t"]],["t"]]],[11,"try_from","","",65,[[["u"]],["result"]]],[11,"borrow","","",65,[[["self"]],["t"]]],[11,"get_type_id","","",65,[[["self"]],["typeid"]]],[11,"try_into","","",65,[[["self"]],["result"]]],[11,"borrow_mut","","",65,[[["self"]],["t"]]],[11,"from_sample_","","",65,[[["s"]],["s"]]],[11,"to_sample_","","",65,[[["self"]],["u"]]],[11,"into","","",66,[[["self"]],["u"]]],[11,"from","","",66,[[["t"]],["t"]]],[11,"try_from","","",66,[[["u"]],["result"]]],[11,"borrow","","",66,[[["self"]],["t"]]],[11,"get_type_id","","",66,[[["self"]],["typeid"]]],[11,"try_into","","",66,[[["self"]],["result"]]],[11,"borrow_mut","","",66,[[["self"]],["t"]]],[11,"from_sample_","","",66,[[["s"]],["s"]]],[11,"to_sample_","","",66,[[["self"]],["u"]]],[11,"into","","",67,[[["self"]],["u"]]],[11,"from","","",67,[[["t"]],["t"]]],[11,"try_from","","",67,[[["u"]],["result"]]],[11,"borrow","","",67,[[["self"]],["t"]]],[11,"get_type_id","","",67,[[["self"]],["typeid"]]],[11,"try_into","","",67,[[["self"]],["result"]]],[11,"borrow_mut","","",67,[[["self"]],["t"]]],[11,"from_sample_","","",67,[[["s"]],["s"]]],[11,"to_sample_","","",67,[[["self"]],["u"]]],[11,"into","","",68,[[["self"]],["u"]]],[11,"from","","",68,[[["t"]],["t"]]],[11,"try_from","","",68,[[["u"]],["result"]]],[11,"borrow","","",68,[[["self"]],["t"]]],[11,"get_type_id","","",68,[[["self"]],["typeid"]]],[11,"try_into","","",68,[[["self"]],["result"]]],[11,"borrow_mut","","",68,[[["self"]],["t"]]],[11,"from_sample_","","",68,[[["s"]],["s"]]],[11,"to_sample_","","",68,[[["self"]],["u"]]],[11,"into","","",69,[[["self"]],["u"]]],[11,"from","","",69,[[["t"]],["t"]]],[11,"into_iter","","",69,[[["self"]],["i"]]],[11,"try_from","","",69,[[["u"]],["result"]]],[11,"borrow","","",69,[[["self"]],["t"]]],[11,"get_type_id","","",69,[[["self"]],["typeid"]]],[11,"try_into","","",69,[[["self"]],["result"]]],[11,"borrow_mut","","",69,[[["self"]],["t"]]],[11,"from_sample_","","",69,[[["s"]],["s"]]],[11,"to_sample_","","",69,[[["self"]],["u"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"from_sample_","","",28,[[["s"]],["s"]]],[11,"to_sample_","","",28,[[["self"]],["u"]]],[11,"into","rsynth::middleware::timesplit","",35,[[["self"]],["u"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"from_sample_","","",35,[[["s"]],["s"]]],[11,"to_sample_","","",35,[[["self"]],["u"]]],[11,"into","","",70,[[["self"]],["u"]]],[11,"from","","",70,[[["t"]],["t"]]],[11,"try_from","","",70,[[["u"]],["result"]]],[11,"borrow","","",70,[[["self"]],["t"]]],[11,"get_type_id","","",70,[[["self"]],["typeid"]]],[11,"try_into","","",70,[[["self"]],["result"]]],[11,"borrow_mut","","",70,[[["self"]],["t"]]],[11,"from_sample_","","",70,[[["s"]],["s"]]],[11,"to_sample_","","",70,[[["self"]],["u"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"from","","",36,[[["t"]],["t"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"from_sample_","","",36,[[["s"]],["s"]]],[11,"to_sample_","","",36,[[["self"]],["u"]]],[11,"into","rsynth::utilities::polyphony","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"from","","",37,[[["t"]],["t"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"from_sample_","","",37,[[["s"]],["s"]]],[11,"to_sample_","","",37,[[["self"]],["u"]]],[11,"into","","",71,[[["self"]],["u"]]],[11,"from","","",71,[[["t"]],["t"]]],[11,"try_from","","",71,[[["u"]],["result"]]],[11,"borrow","","",71,[[["self"]],["t"]]],[11,"get_type_id","","",71,[[["self"]],["typeid"]]],[11,"try_into","","",71,[[["self"]],["result"]]],[11,"borrow_mut","","",71,[[["self"]],["t"]]],[11,"from_sample_","","",71,[[["s"]],["s"]]],[11,"to_sample_","","",71,[[["self"]],["u"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"from_sample_","","",38,[[["s"]],["s"]]],[11,"to_sample_","","",38,[[["self"]],["u"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"from","","",39,[[["t"]],["t"]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"from_sample_","","",39,[[["s"]],["s"]]],[11,"to_sample_","","",39,[[["self"]],["u"]]],[11,"into","rsynth::utilities::polyphony::simple_event_dispatching","",41,[[["self"]],["u"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"get_type_id","","",41,[[["self"]],["typeid"]]],[11,"try_into","","",41,[[["self"]],["result"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"from_sample_","","",41,[[["s"]],["s"]]],[11,"to_sample_","","",41,[[["self"]],["u"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,N],[11,"from","","",40,[[["t"]],["t"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"from_sample_","","",40,[[["s"]],["s"]]],[11,"to_sample_","","",40,[[["self"]],["u"]]],[11,"into","rsynth::metaconfig","",72,[[["self"]],["u"]]],[11,"from","","",72,[[["t"]],["t"]]],[11,"try_from","","",72,[[["u"]],["result"]]],[11,"borrow","","",72,[[["self"]],["t"]]],[11,"get_type_id","","",72,[[["self"]],["typeid"]]],[11,"try_into","","",72,[[["self"]],["result"]]],[11,"borrow_mut","","",72,[[["self"]],["t"]]],[11,"from_sample_","","",72,[[["s"]],["s"]]],[11,"to_sample_","","",72,[[["self"]],["u"]]],[11,"into","","",73,[[["self"]],["u"]]],[11,"from","","",73,[[["t"]],["t"]]],[11,"try_from","","",73,[[["u"]],["result"]]],[11,"borrow","","",73,[[["self"]],["t"]]],[11,"get_type_id","","",73,[[["self"]],["typeid"]]],[11,"try_into","","",73,[[["self"]],["result"]]],[11,"borrow_mut","","",73,[[["self"]],["t"]]],[11,"from_sample_","","",73,[[["s"]],["s"]]],[11,"to_sample_","","",73,[[["self"]],["u"]]],[11,"into","","",47,[[["self"]],["u"]]],[11,"from","","",47,[[["t"]],["t"]]],[11,"try_from","","",47,[[["u"]],["result"]]],[11,"borrow","","",47,[[["self"]],["t"]]],[11,"get_type_id","","",47,[[["self"]],["typeid"]]],[11,"try_into","","",47,[[["self"]],["result"]]],[11,"borrow_mut","","",47,[[["self"]],["t"]]],[11,"from_sample_","","",47,[[["s"]],["s"]]],[11,"to_sample_","","",47,[[["self"]],["u"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"from_sample_","","",48,[[["s"]],["s"]]],[11,"to_sample_","","",48,[[["self"]],["u"]]],[11,"number_of_channels","rsynth::backend::combined::dummy","",2,[[["self"]],["usize"]]],[11,"frames_per_second","","",2,[[["self"]],["u64"]]],[11,"fill_buffer","","",2,N],[11,"number_of_channels","rsynth::backend::combined::hound","",5,[[["self"]],["usize"]]],[11,"frames_per_second","","",5,[[["self"]],["u64"]]],[11,"fill_buffer","","",5,N],[11,"number_of_channels","rsynth::backend::combined::memory","",7,[[["self"]],["usize"]]],[11,"frames_per_second","","",7,[[["self"]],["u64"]]],[11,"fill_buffer","","",7,N],[11,"write_buffer","rsynth::backend::combined::dummy","",2,N],[11,"write_buffer","rsynth::backend::combined::hound","",6,N],[11,"write_buffer","rsynth::backend::combined::memory","",8,N],[11,"write_buffer","rsynth::backend::combined","",18,N],[11,"read_event","rsynth::backend::combined::dummy","",3,[[["self"]],["option",["deltaevent"]]]],[11,"read_event","rsynth::backend::combined::rimd","",10,[[["self"]],["option",["deltaevent"]]]],[11,"read_event","rsynth::backend::combined","",16,[[["self"]],["option",["deltaevent"]]]],[11,"read_event","","",19,[[["self"]],["option",["deltaevent"]]]],[11,"write_event","rsynth::backend::combined::dummy","",3,[[["self"],["deltaevent",["rawmidievent"]]]]],[11,"write_event","rsynth::backend::combined::rimd","",11,[[["self"],["deltaevent",["rawmidievent"]]]]],[11,"write_event","rsynth::backend::combined","",20,[[["self"],["deltaevent",["rawmidievent"]]]]],[11,"output_initialized","rsynth::backend::jack_backend","",62,[[["self"]],["bool"]]],[11,"iter","rsynth::envelope::staircase_envelope","",64,N],[11,"insert_event","","",64,[[["self"],["timed"]]]],[11,"forget_past","","",64,[[["self"],["u32"]]]],[11,"decide_on_collision","rsynth::event::event_queue","",65,[[["self"],["t"],["t"]],["eventcollisionhandling"]]],[11,"decide_on_collision","","",66,[[["self"],["t"],["t"]],["eventcollisionhandling"]]],[11,"decide_on_collision","","",67,[[["self"],["t"],["t"]],["eventcollisionhandling"]]],[11,"decide_on_collision","","",68,[[["self"],["t"],["t"]],["eventcollisionhandling"]]],[11,"handle_event","rsynth::dev_utilities","",1,[[["self"],["e"]]]],[11,"handle_event","rsynth::backend::combined","",17,[[["self"],["timed",["rawmidievent"]]]]],[11,"handle_event","rsynth::backend::jack_backend","",62,[[["self"],["indexed",["timed"]]]]],[11,"handle_event","","",62,[[["self"],["indexed",["timed"]]]]],[11,"classify","rsynth::utilities::polyphony","",71,[[["self"],["event"]],["eventdispatchclass"]]],[11,"classify","rsynth::utilities::polyphony::simple_event_dispatching","",41,[[["self"],["event"]],["eventdispatchclass"]]],[11,"find_active_voice","","",41,N],[11,"find_idle_voice","","",41,N],[11,"general","rsynth::metaconfig","",47,[[["self"]],["g"]]],[11,"in_ports","","",47,N],[11,"out_ports","","",47,N],[11,"in_ports","","",47,N],[11,"out_ports","","",47,N],[11,"max_number_of_audio_inputs","rsynth::dev_utilities","",1,[[["self"]],["usize"]]],[11,"max_number_of_audio_outputs","","",1,[[["self"]],["usize"]]],[11,"set_sample_rate","","",1,[[["self"],["f64"]]]],[11,"render_buffer","","",1,N],[11,"next","rsynth::envelope::staircase_envelope","",63,[[["self"]],["option"]]],[11,"next","rsynth::event::event_queue","",69,[[["self"]],["option"]]],[11,"as_mut","rsynth::event","",34,[[["self"]],["rawmidievent"]]],[11,"as_mut","","",26,[[["self"]],["e"]]],[11,"as_mut","","",27,[[["self"]],["e"]]],[11,"default","rsynth::utilities::polyphony","",71,[[],["rawmidieventtoneidentifierdispatchclassifier"]]],[11,"default","rsynth::utilities::polyphony::simple_event_dispatching","",41,[[],["self"]]],[11,"eq","rsynth::dev_utilities::chunk","",0,[[["self"],["audiochunk"]],["bool"]]],[11,"ne","","",0,[[["self"],["audiochunk"]],["bool"]]],[11,"eq","rsynth::backend::combined","",61,[[["self"],["deltaevent"]],["bool"]]],[11,"ne","","",61,[[["self"],["deltaevent"]],["bool"]]],[11,"eq","rsynth::envelope","",24,[[["self"],["envelopeiteratoritem"]],["bool"]]],[11,"ne","","",24,[[["self"],["envelopeiteratoritem"]],["bool"]]],[11,"eq","rsynth::event","",33,[[["self"],["sysexevent"]],["bool"]]],[11,"ne","","",33,[[["self"],["sysexevent"]],["bool"]]],[11,"eq","","",34,[[["self"],["rawmidievent"]],["bool"]]],[11,"ne","","",34,[[["self"],["rawmidievent"]],["bool"]]],[11,"eq","","",26,[[["self"],["timed"]],["bool"]]],[11,"ne","","",26,[[["self"],["timed"]],["bool"]]],[11,"eq","","",27,[[["self"],["indexed"]],["bool"]]],[11,"ne","","",27,[[["self"],["indexed"]],["bool"]]],[11,"eq","rsynth::utilities::polyphony","",37,[[["self"],["toneidentifier"]],["bool"]]],[11,"ne","","",37,[[["self"],["toneidentifier"]],["bool"]]],[11,"eq","","",39,[[["self"],["voiceassignment"]],["bool"]]],[11,"ne","","",39,[[["self"],["voiceassignment"]],["bool"]]],[11,"eq","rsynth::utilities::polyphony::simple_event_dispatching","",40,[[["self"],["simplevoicestate"]],["bool"]]],[11,"ne","","",40,[[["self"],["simplevoicestate"]],["bool"]]],[11,"as_ref","rsynth::event","",34,[[["self"]],["rawmidievent"]]],[11,"as_ref","","",26,[[["self"]],["e"]]],[11,"as_ref","","",27,[[["self"]],["e"]]],[11,"clone","rsynth::dev_utilities::chunk","",0,[[["self"]],["audiochunk"]]],[11,"clone","rsynth::backend::combined","",61,[[["self"]],["deltaevent"]]],[11,"clone","rsynth::envelope","",24,[[["self"]],["envelopeiteratoritem"]]],[11,"clone","rsynth::event","",33,[[["self"]],["sysexevent"]]],[11,"clone","","",34,[[["self"]],["rawmidievent"]]],[11,"clone","","",26,[[["self"]],["self"]]],[11,"clone","","",27,[[["self"]],["self"]]],[11,"clone","rsynth::utilities::polyphony","",37,[[["self"]],["toneidentifier"]]],[11,"clone","","",39,[[["self"]],["voiceassignment"]]],[11,"clone","rsynth::utilities::polyphony::simple_event_dispatching","",40,[[["self"]],["simplevoicestate"]]],[11,"fmt","rsynth::dev_utilities::chunk","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","rsynth::backend::combined::rimd","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","rsynth::backend::combined","",61,[[["self"],["formatter"]],["result"]]],[11,"fmt","rsynth::envelope","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","rsynth::event","",33,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result",["error"]]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","rsynth::utilities::polyphony","",37,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",39,[[["self"],["formatter"]],["result"]]],[11,"index","rsynth::event::event_queue","",30,N],[11,"index_mut","","",30,N]],"paths":[[3,"AudioChunk"],[3,"TestPlugin"],[3,"AudioDummy"],[3,"MidiDummy"],[4,"HoundAudioError"],[3,"HoundAudioReader"],[3,"HoundAudioWriter"],[3,"AudioBufferReader"],[3,"AudioBufferWriter"],[4,"MidiHandleError"],[3,"RimdMidiReader"],[3,"RimdMidiWriter"],[8,"AudioReader"],[8,"AudioWriter"],[8,"MidiReader"],[8,"MidiWriter"],[3,"PeakableMidiReader"],[3,"MidiWriterWrapper"],[3,"TestWriter"],[3,"TestMidiReader"],[3,"TestMidiWriter"],[8,"VstPluginMeta"],[3,"VstPluginWrapper"],[8,"HostInterface"],[3,"EnvelopeIteratorItem"],[8,"Envelope"],[3,"Timed"],[3,"Indexed"],[4,"EventCollisionHandling"],[8,"HandleEventCollision"],[3,"EventQueue"],[8,"EventHandler"],[8,"ContextualEventHandler"],[3,"SysExEvent"],[3,"RawMidiEvent"],[3,"TimeChunk"],[3,"TimeSplitter"],[3,"ToneIdentifier"],[4,"EventDispatchClass"],[4,"VoiceAssignment"],[4,"SimpleVoiceState"],[3,"SimpleEventDispatcher"],[8,"EventDispatchClassifier"],[8,"Voice"],[8,"VoiceAssigner"],[8,"EventDispatcher"],[8,"ContextualEventDispatcher"],[3,"MetaData"],[3,"InOut"],[8,"Meta"],[8,"General"],[8,"Name"],[8,"Port"],[8,"AudioHandlerMeta"],[8,"AudioHandler"],[8,"MidiHandlerMeta"],[8,"AudioRenderer"],[8,"ContextualAudioRenderer"],[8,"CommonPluginMeta"],[8,"CommonAudioPortMeta"],[8,"CommonMidiPortMeta"],[3,"DeltaEvent"],[3,"JackHost"],[3,"StairCaseEnvelopeIterator"],[3,"StairCaseEnvelope"],[3,"AlwaysInsertNewBeforeOld"],[3,"AlwaysInsertNewAfterOld"],[3,"AlwaysIgnoreNew"],[3,"AlwaysRemoveOld"],[3,"Iter"],[3,"TimeChunkIterator"],[3,"RawMidiEventToneIdentifierDispatchClassifier"],[3,"MidiPort"],[3,"AudioPort"]]};
initSearch(searchIndex);
